{"version":3,"sources":["Main/Main.js","assets/default.gif","App.js","reportWebVitals.js","index.js"],"names":["animationInterval","gifFrames","require","Main","useState","frames","setFrames","defaultgif","url","seturl","toGrayScale","r","g","b","grayRamp","rampLength","length","canvas","document","createElement","context","getContext","clampDimensions","width","height","rectifiedWidth","Math","floor","pre","style","display","textContent","body","appendChild","getBoundingClientRect","removeChild","getFontRatio","fetchGIF","file","outputType","then","frameData","gifWidth","clearRect","asciiGIF","i","setInterval","animateASCII","map","frame","getImage","drawImage","gifData","Array","from","getImageData","data","array","grayScales","grayScale","push","getGrayScales","idx","nextChars","ceil","getCharacterForGrayScale","join","catch","console","error","bind","useEffect","clearInterval","className","type","accept","name","id","onChange","e","URL","createObjectURL","target","files","htmlFor","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b6fb0217.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport \"./MainStyle.scss\"\r\nimport defaultgif from \"../assets/default.gif\"\r\nvar gifFrames = require('gif-frames');\r\n// var fs = require('fs');\r\nlet animationInterval\r\n\r\nconst Main = () => {\r\n    const [frames, setFrames] = useState(null)\r\n    const [url, seturl] = useState(defaultgif)\r\n    const toGrayScale = (r, g, b) => 0.21 * r + 0.72 * g + 0.07 * b;\r\n    const grayRamp = '$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/|()1{}[]?-_+~<>i!lI;:,\"^`\\'. ';\r\n    const rampLength = grayRamp.length;\r\n    const MAXIMUM_WIDTH = 80;\r\n    const MAXIMUM_HEIGHT = 80;\r\n    const canvas = document.createElement(\"canvas\");\r\n    const context = canvas.getContext('2d')\r\n    \r\n\r\n    const getCharacterForGrayScale = grayScale => grayRamp[Math.ceil((rampLength - 1) * grayScale / 255)];\r\n\r\n    const getGrayScales = (array) => {\r\n    \r\n        const grayScales = [];\r\n    \r\n        for (let i = 0 ; i < array.length ; i += 4) {\r\n            const r = array[i];\r\n            const g = array[i + 1];\r\n            const b = array[i + 2];\r\n    \r\n            const grayScale = toGrayScale(r, g, b);\r\n            array[i] = array[i + 1] = array[i + 2] = grayScale;\r\n    \r\n            grayScales.push(grayScale);\r\n        }\r\n    \r\n    \r\n        return grayScales;\r\n    };\r\n\r\n    const getFontRatio = () => {\r\n        const pre = document.createElement('pre');\r\n        pre.style.display = 'inline';\r\n        pre.textContent = ' ';\r\n    \r\n        document.body.appendChild(pre);\r\n        const { width, height } = pre.getBoundingClientRect();\r\n        document.body.removeChild(pre);\r\n    \r\n        return height / width;\r\n    };\r\n    \r\n\r\n    const clampDimensions = (width, height) => {\r\n        const rectifiedWidth = Math.floor(getFontRatio() * width);\r\n        if (height > MAXIMUM_HEIGHT) {\r\n            const reducedWidth = Math.floor(rectifiedWidth * MAXIMUM_HEIGHT / height);\r\n            return [reducedWidth, MAXIMUM_HEIGHT];\r\n        }\r\n\r\n        if (width > MAXIMUM_WIDTH) {\r\n            const reducedHeight = Math.floor(height * MAXIMUM_WIDTH / rectifiedWidth);\r\n            return [MAXIMUM_WIDTH, reducedHeight];\r\n        }\r\n\r\n        return [rectifiedWidth, height];\r\n    };\r\n\r\n\r\n\r\n\r\n    const animateASCII = (asciiGIF) => {\r\n        let i = 0\r\n        animationInterval = setInterval(() => {\r\n            if(i === asciiGIF.length) i = 0\r\n            setFrames(asciiGIF[i])\r\n            i++\r\n        }, 100)\r\n    }\r\n\r\n\r\n    const fetchGIF = file => {\r\n        gifFrames({ url: file, frames: '0-199', outputType: 'canvas' })\r\n                    .then(function (frameData) {\r\n                    let gifWidth\r\n                    context.clearRect(0, 0, canvas.width, canvas.height)\r\n                    const gifFrameData = frameData.map( frame => {\r\n                            const [width, height] = clampDimensions(frame.getImage().width, frame.getImage().height);\r\n                            context.drawImage(frame.getImage(), 0, 0, width, height);\r\n                            const gifData = Array.from(context.getImageData(0, 0, width, height).data)\r\n                            \r\n                            gifWidth = width\r\n                        return gifData\r\n                        }  );\r\n                        const asciiGIF = gifFrameData.map( (data) => {\r\n                                // console.log(data)\r\n                                const gray = getGrayScales(data) \r\n                                return gray.map((grayScale, idx) => {\r\n                                    let nextChars = getCharacterForGrayScale(grayScale);\r\n                                    return (!((idx + 1) % gifWidth === 0)) ? nextChars : nextChars + '\\n';\r\n                                }).join('')\r\n                                // }, '')\r\n\r\n                                \r\n                            })\r\n                            animateASCII(asciiGIF)\r\n\r\n                    }).catch( console.error.bind(console));\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        clearInterval(animationInterval)\r\n        fetchGIF(url)\r\n    }, [url])\r\n\r\n\r\n    const handleChange = e => {\r\n        seturl(URL.createObjectURL(e.target.files[0]))\r\n    }\r\n\r\n  \r\n\r\n    return (\r\n        <div className=\"main-wrapper\" >\r\n            <h1> ASCII GIF Converter </h1>\r\n            <div className=\"inputs\" >\r\n                <input type=\"file\"  accept=\"image/gif\" name=\"image-upload\" id=\"upload\" onChange={ handleChange }  />\r\n                <label htmlFor=\"upload\" type=\"url\"  name=\"image-url\" id=\"url\" className=\"upload-label\" >Upload GIF</label>\r\n            </div>\r\n            {frames && <pre>{frames}</pre> }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","export default __webpack_public_path__ + \"static/media/default.68dc4438.gif\";","import './App.css';\nimport Main from './Main/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}